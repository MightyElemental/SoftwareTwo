// Task 1

Procedure swap(A, B :Z)
	A := A+B
	B := A-B
	A := A-B
return A, B

// Task 2
1.
It should work for any integer.
It's most likely to go wrong when the numbers are negative, but even that seems to work.

2.
It should also work for any real number but may run into issues if the numbers are small due to binary representation errors.

3.
Although it is possible to prove an algorithm is correct by using test cases, not all algorithms can be proved this way.
For example, there's no way to prove by exhaustion that this algorithm works as it has potentially infinite inputs.

4.
Yes, you can disprove an algorithm by finding a single, or multiple, cases where it fails.

// Task 3
Substituting the lines of the algorithm into each other
Bout = (Ain+Bin)-Bin
  = Ain
  
Aout = (Ain+Bin)-((Ain+Bin)-Bin)
     = Ain+Bin - Ain
     = Bin
     
It should be a valid proof for all integers as the proof only deals with variables.

// Task 4
yellow - x ln x
red - x
blue - ln x

// Task 4 (2)
red - x!
blue - e^x

// Task 4 (3)
yellow - x^3
red - x^2
blue - x ln x

// Task 5

1: 1
2: 1
3: 3
4: 5
5: 9

closest to `x ln x`



